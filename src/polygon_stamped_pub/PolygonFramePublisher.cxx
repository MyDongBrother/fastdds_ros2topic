// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PolygonFramePublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include "PolygonFramePublisher.h"
#include "PolygonFramePubSubTypes.h"

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>

#include <thread>
#include <chrono>

using namespace eprosima::fastdds::dds;

PolygonFramePublisher::PolygonFramePublisher()
    : participant_(nullptr), publisher_(nullptr), topic_(nullptr), writer_(nullptr), type_(new apa_msgs::msg::PolygonFramePubSubType())
{
}

PolygonFramePublisher::~PolygonFramePublisher()
{
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool PolygonFramePublisher::init()
{
    /* Initialize data_ here */

    // CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_pub");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    // REGISTER THE TYPE
    type_.register_type(participant_);

    // CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);
    if (publisher_ == nullptr)
    {
        return false;
    }

    // CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "rt/PolygonFrameTopic",
        type_.get_type_name(),
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    // CREATE THE WRITER
    writer_ = publisher_->create_datawriter(topic_, DATAWRITER_QOS_DEFAULT, &listener_);
    if (writer_ == nullptr)
    {
        return false;
    }

    std::cout << "apa_msgs::msg::PolygonFrame DataWriter created." << std::endl;
    return true;
}

void PolygonFramePublisher::PubListener::on_publication_matched(
    eprosima::fastdds::dds::DataWriter *,
    const eprosima::fastdds::dds::PublicationMatchedStatus &info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "DataWriter matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "DataWriter unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

#include <chrono>
#include <thread>
#include <iostream>

void PolygonFramePublisher::run()
{
    // 等待订阅者
    while (listener_.matched == 0)
        std::this_thread::sleep_for(std::chrono::milliseconds(500));

    apa_msgs::msg::PolygonFrame poly;
    poly.header().frame_id() = "map";

    // 设置矩形四个点
    poly.points().resize(4);
    poly.points()[0].x() = 0.0;
    poly.points()[0].y() = 0.0;
    poly.points()[0].z() = 0.0;
    poly.points()[1].x() = 1.0;
    poly.points()[1].y() = 0.0;
    poly.points()[1].z() = 0.0;
    poly.points()[2].x() = 1.0;
    poly.points()[2].y() = 1.0;
    poly.points()[2].z() = 0.0;
    poly.points()[3].x() = 0.0;
    poly.points()[3].y() = 1.0;
    poly.points()[3].z() = 0.0;

    for (int i = 0; i < 10; ++i) // 发送10条测试数据
    {
        auto now = std::chrono::system_clock::now();
        auto ns = std::chrono::duration_cast<std::chrono::nanoseconds>(now.time_since_epoch()).count();
        poly.header().stamp().sec() = static_cast<int32_t>(ns / 1000000000);
        poly.header().stamp().nanosec() = static_cast<uint32_t>(ns % 1000000000);

        writer_->write(&poly);
        std::cout << "Sent sample " << i + 1 << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
}
