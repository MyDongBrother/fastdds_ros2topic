// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file JointCommand.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "JointCommand.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

pendulum_msgs::msg::JointCommand::JointCommand()
{
    // m_position com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb0ed20
    m_position = 0.0;

}

pendulum_msgs::msg::JointCommand::~JointCommand()
{
}

pendulum_msgs::msg::JointCommand::JointCommand(
        const JointCommand& x)
{
    m_position = x.m_position;
}

pendulum_msgs::msg::JointCommand::JointCommand(
        JointCommand&& x)
{
    m_position = x.m_position;
}

pendulum_msgs::msg::JointCommand& pendulum_msgs::msg::JointCommand::operator =(
        const JointCommand& x)
{

    m_position = x.m_position;

    return *this;
}

pendulum_msgs::msg::JointCommand& pendulum_msgs::msg::JointCommand::operator =(
        JointCommand&& x)
{

    m_position = x.m_position;

    return *this;
}

bool pendulum_msgs::msg::JointCommand::operator ==(
        const JointCommand& x) const
{

    return (m_position == x.m_position);
}

bool pendulum_msgs::msg::JointCommand::operator !=(
        const JointCommand& x) const
{
    return !(*this == x);
}

size_t pendulum_msgs::msg::JointCommand::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t pendulum_msgs::msg::JointCommand::getCdrSerializedSize(
        const pendulum_msgs::msg::JointCommand& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void pendulum_msgs::msg::JointCommand::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_position;

}

void pendulum_msgs::msg::JointCommand::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_position;
}

/*!
 * @brief This function sets a value in member position
 * @param _position New value for member position
 */
void pendulum_msgs::msg::JointCommand::position(
        double _position)
{
    m_position = _position;
}

/*!
 * @brief This function returns the value of member position
 * @return Value of member position
 */
double pendulum_msgs::msg::JointCommand::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
double& pendulum_msgs::msg::JointCommand::position()
{
    return m_position;
}


size_t pendulum_msgs::msg::JointCommand::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool pendulum_msgs::msg::JointCommand::isKeyDefined()
{
    return false;
}

void pendulum_msgs::msg::JointCommand::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


