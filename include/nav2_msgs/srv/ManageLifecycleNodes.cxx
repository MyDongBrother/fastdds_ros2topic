// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ManageLifecycleNodes.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ManageLifecycleNodes.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>







nav2_msgs::srv::ManageLifecycleNodes_Request::ManageLifecycleNodes_Request()
{
    // m_command com.eprosima.idl.parser.typecode.PrimitiveTypeCode@704d6e83
    m_command = 0;

}

nav2_msgs::srv::ManageLifecycleNodes_Request::~ManageLifecycleNodes_Request()
{
}

nav2_msgs::srv::ManageLifecycleNodes_Request::ManageLifecycleNodes_Request(
        const ManageLifecycleNodes_Request& x)
{
    m_command = x.m_command;
}

nav2_msgs::srv::ManageLifecycleNodes_Request::ManageLifecycleNodes_Request(
        ManageLifecycleNodes_Request&& x)
{
    m_command = x.m_command;
}

nav2_msgs::srv::ManageLifecycleNodes_Request& nav2_msgs::srv::ManageLifecycleNodes_Request::operator =(
        const ManageLifecycleNodes_Request& x)
{

    m_command = x.m_command;

    return *this;
}

nav2_msgs::srv::ManageLifecycleNodes_Request& nav2_msgs::srv::ManageLifecycleNodes_Request::operator =(
        ManageLifecycleNodes_Request&& x)
{

    m_command = x.m_command;

    return *this;
}

bool nav2_msgs::srv::ManageLifecycleNodes_Request::operator ==(
        const ManageLifecycleNodes_Request& x) const
{

    return (m_command == x.m_command);
}

bool nav2_msgs::srv::ManageLifecycleNodes_Request::operator !=(
        const ManageLifecycleNodes_Request& x) const
{
    return !(*this == x);
}

size_t nav2_msgs::srv::ManageLifecycleNodes_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t nav2_msgs::srv::ManageLifecycleNodes_Request::getCdrSerializedSize(
        const nav2_msgs::srv::ManageLifecycleNodes_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void nav2_msgs::srv::ManageLifecycleNodes_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_command;

}

void nav2_msgs::srv::ManageLifecycleNodes_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_command;
}

/*!
 * @brief This function sets a value in member command
 * @param _command New value for member command
 */
void nav2_msgs::srv::ManageLifecycleNodes_Request::command(
        uint8_t _command)
{
    m_command = _command;
}

/*!
 * @brief This function returns the value of member command
 * @return Value of member command
 */
uint8_t nav2_msgs::srv::ManageLifecycleNodes_Request::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
uint8_t& nav2_msgs::srv::ManageLifecycleNodes_Request::command()
{
    return m_command;
}


size_t nav2_msgs::srv::ManageLifecycleNodes_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav2_msgs::srv::ManageLifecycleNodes_Request::isKeyDefined()
{
    return false;
}

void nav2_msgs::srv::ManageLifecycleNodes_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

nav2_msgs::srv::ManageLifecycleNodes_Response::ManageLifecycleNodes_Response()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@710726a3
    m_success = false;

}

nav2_msgs::srv::ManageLifecycleNodes_Response::~ManageLifecycleNodes_Response()
{
}

nav2_msgs::srv::ManageLifecycleNodes_Response::ManageLifecycleNodes_Response(
        const ManageLifecycleNodes_Response& x)
{
    m_success = x.m_success;
}

nav2_msgs::srv::ManageLifecycleNodes_Response::ManageLifecycleNodes_Response(
        ManageLifecycleNodes_Response&& x)
{
    m_success = x.m_success;
}

nav2_msgs::srv::ManageLifecycleNodes_Response& nav2_msgs::srv::ManageLifecycleNodes_Response::operator =(
        const ManageLifecycleNodes_Response& x)
{

    m_success = x.m_success;

    return *this;
}

nav2_msgs::srv::ManageLifecycleNodes_Response& nav2_msgs::srv::ManageLifecycleNodes_Response::operator =(
        ManageLifecycleNodes_Response&& x)
{

    m_success = x.m_success;

    return *this;
}

bool nav2_msgs::srv::ManageLifecycleNodes_Response::operator ==(
        const ManageLifecycleNodes_Response& x) const
{

    return (m_success == x.m_success);
}

bool nav2_msgs::srv::ManageLifecycleNodes_Response::operator !=(
        const ManageLifecycleNodes_Response& x) const
{
    return !(*this == x);
}

size_t nav2_msgs::srv::ManageLifecycleNodes_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t nav2_msgs::srv::ManageLifecycleNodes_Response::getCdrSerializedSize(
        const nav2_msgs::srv::ManageLifecycleNodes_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void nav2_msgs::srv::ManageLifecycleNodes_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;

}

void nav2_msgs::srv::ManageLifecycleNodes_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void nav2_msgs::srv::ManageLifecycleNodes_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool nav2_msgs::srv::ManageLifecycleNodes_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& nav2_msgs::srv::ManageLifecycleNodes_Response::success()
{
    return m_success;
}


size_t nav2_msgs::srv::ManageLifecycleNodes_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav2_msgs::srv::ManageLifecycleNodes_Response::isKeyDefined()
{
    return false;
}

void nav2_msgs::srv::ManageLifecycleNodes_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


