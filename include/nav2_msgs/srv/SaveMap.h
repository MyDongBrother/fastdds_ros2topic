// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SaveMap.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_NAV2_MSGS_SRV_SAVEMAP_H_
#define _FAST_DDS_GENERATED_NAV2_MSGS_SRV_SAVEMAP_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SaveMap_SOURCE)
#define SaveMap_DllAPI __declspec( dllexport )
#else
#define SaveMap_DllAPI __declspec( dllimport )
#endif // SaveMap_SOURCE
#else
#define SaveMap_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SaveMap_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace nav2_msgs {
    namespace srv {
        /*!
         * @brief This class represents the structure SaveMap_Request defined by the user in the IDL file.
         * @ingroup SAVEMAP
         */
        class SaveMap_Request
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SaveMap_Request();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SaveMap_Request();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Request that will be copied.
             */
            eProsima_user_DllExport SaveMap_Request(
                    const SaveMap_Request& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Request that will be copied.
             */
            eProsima_user_DllExport SaveMap_Request(
                    SaveMap_Request&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Request that will be copied.
             */
            eProsima_user_DllExport SaveMap_Request& operator =(
                    const SaveMap_Request& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Request that will be copied.
             */
            eProsima_user_DllExport SaveMap_Request& operator =(
                    SaveMap_Request&& x);

            /*!
             * @brief Comparison operator.
             * @param x nav2_msgs::srv::SaveMap_Request object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const SaveMap_Request& x) const;

            /*!
             * @brief Comparison operator.
             * @param x nav2_msgs::srv::SaveMap_Request object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const SaveMap_Request& x) const;

            /*!
             * @brief This function copies the value in member map_topic
             * @param _map_topic New value to be copied in member map_topic
             */
            eProsima_user_DllExport void map_topic(
                    const std::string& _map_topic);

            /*!
             * @brief This function moves the value in member map_topic
             * @param _map_topic New value to be moved in member map_topic
             */
            eProsima_user_DllExport void map_topic(
                    std::string&& _map_topic);

            /*!
             * @brief This function returns a constant reference to member map_topic
             * @return Constant reference to member map_topic
             */
            eProsima_user_DllExport const std::string& map_topic() const;

            /*!
             * @brief This function returns a reference to member map_topic
             * @return Reference to member map_topic
             */
            eProsima_user_DllExport std::string& map_topic();
            /*!
             * @brief This function copies the value in member map_url
             * @param _map_url New value to be copied in member map_url
             */
            eProsima_user_DllExport void map_url(
                    const std::string& _map_url);

            /*!
             * @brief This function moves the value in member map_url
             * @param _map_url New value to be moved in member map_url
             */
            eProsima_user_DllExport void map_url(
                    std::string&& _map_url);

            /*!
             * @brief This function returns a constant reference to member map_url
             * @return Constant reference to member map_url
             */
            eProsima_user_DllExport const std::string& map_url() const;

            /*!
             * @brief This function returns a reference to member map_url
             * @return Reference to member map_url
             */
            eProsima_user_DllExport std::string& map_url();
            /*!
             * @brief This function copies the value in member image_format
             * @param _image_format New value to be copied in member image_format
             */
            eProsima_user_DllExport void image_format(
                    const std::string& _image_format);

            /*!
             * @brief This function moves the value in member image_format
             * @param _image_format New value to be moved in member image_format
             */
            eProsima_user_DllExport void image_format(
                    std::string&& _image_format);

            /*!
             * @brief This function returns a constant reference to member image_format
             * @return Constant reference to member image_format
             */
            eProsima_user_DllExport const std::string& image_format() const;

            /*!
             * @brief This function returns a reference to member image_format
             * @return Reference to member image_format
             */
            eProsima_user_DllExport std::string& image_format();
            /*!
             * @brief This function copies the value in member map_mode
             * @param _map_mode New value to be copied in member map_mode
             */
            eProsima_user_DllExport void map_mode(
                    const std::string& _map_mode);

            /*!
             * @brief This function moves the value in member map_mode
             * @param _map_mode New value to be moved in member map_mode
             */
            eProsima_user_DllExport void map_mode(
                    std::string&& _map_mode);

            /*!
             * @brief This function returns a constant reference to member map_mode
             * @return Constant reference to member map_mode
             */
            eProsima_user_DllExport const std::string& map_mode() const;

            /*!
             * @brief This function returns a reference to member map_mode
             * @return Reference to member map_mode
             */
            eProsima_user_DllExport std::string& map_mode();
            /*!
             * @brief This function sets a value in member free_thresh
             * @param _free_thresh New value for member free_thresh
             */
            eProsima_user_DllExport void free_thresh(
                    float _free_thresh);

            /*!
             * @brief This function returns the value of member free_thresh
             * @return Value of member free_thresh
             */
            eProsima_user_DllExport float free_thresh() const;

            /*!
             * @brief This function returns a reference to member free_thresh
             * @return Reference to member free_thresh
             */
            eProsima_user_DllExport float& free_thresh();

            /*!
             * @brief This function sets a value in member occupied_thresh
             * @param _occupied_thresh New value for member occupied_thresh
             */
            eProsima_user_DllExport void occupied_thresh(
                    float _occupied_thresh);

            /*!
             * @brief This function returns the value of member occupied_thresh
             * @return Value of member occupied_thresh
             */
            eProsima_user_DllExport float occupied_thresh() const;

            /*!
             * @brief This function returns a reference to member occupied_thresh
             * @return Reference to member occupied_thresh
             */
            eProsima_user_DllExport float& occupied_thresh();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const nav2_msgs::srv::SaveMap_Request& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_map_topic;
            std::string m_map_url;
            std::string m_image_format;
            std::string m_map_mode;
            float m_free_thresh;
            float m_occupied_thresh;
        };
        /*!
         * @brief This class represents the structure SaveMap_Response defined by the user in the IDL file.
         * @ingroup SAVEMAP
         */
        class SaveMap_Response
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport SaveMap_Response();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~SaveMap_Response();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Response that will be copied.
             */
            eProsima_user_DllExport SaveMap_Response(
                    const SaveMap_Response& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Response that will be copied.
             */
            eProsima_user_DllExport SaveMap_Response(
                    SaveMap_Response&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Response that will be copied.
             */
            eProsima_user_DllExport SaveMap_Response& operator =(
                    const SaveMap_Response& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object nav2_msgs::srv::SaveMap_Response that will be copied.
             */
            eProsima_user_DllExport SaveMap_Response& operator =(
                    SaveMap_Response&& x);

            /*!
             * @brief Comparison operator.
             * @param x nav2_msgs::srv::SaveMap_Response object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const SaveMap_Response& x) const;

            /*!
             * @brief Comparison operator.
             * @param x nav2_msgs::srv::SaveMap_Response object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const SaveMap_Response& x) const;

            /*!
             * @brief This function sets a value in member result
             * @param _result New value for member result
             */
            eProsima_user_DllExport void result(
                    bool _result);

            /*!
             * @brief This function returns the value of member result
             * @return Value of member result
             */
            eProsima_user_DllExport bool result() const;

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            eProsima_user_DllExport bool& result();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const nav2_msgs::srv::SaveMap_Response& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_result;
        };
    } // namespace srv
} // namespace nav2_msgs

#endif // _FAST_DDS_GENERATED_NAV2_MSGS_SRV_SAVEMAP_H_