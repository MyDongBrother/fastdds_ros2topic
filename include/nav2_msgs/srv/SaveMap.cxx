// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SaveMap.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SaveMap.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

nav2_msgs::srv::SaveMap_Request::SaveMap_Request()
{
    // m_map_topic com.eprosima.idl.parser.typecode.StringTypeCode@71a794e5
    m_map_topic ="";
    // m_map_url com.eprosima.idl.parser.typecode.StringTypeCode@76329302
    m_map_url ="";
    // m_image_format com.eprosima.idl.parser.typecode.StringTypeCode@5e25a92e
    m_image_format ="";
    // m_map_mode com.eprosima.idl.parser.typecode.StringTypeCode@4df828d7
    m_map_mode ="";
    // m_free_thresh com.eprosima.idl.parser.typecode.PrimitiveTypeCode@b59d31
    m_free_thresh = 0.0;
    // m_occupied_thresh com.eprosima.idl.parser.typecode.PrimitiveTypeCode@62fdb4a6
    m_occupied_thresh = 0.0;

}

nav2_msgs::srv::SaveMap_Request::~SaveMap_Request()
{





}

nav2_msgs::srv::SaveMap_Request::SaveMap_Request(
        const SaveMap_Request& x)
{
    m_map_topic = x.m_map_topic;
    m_map_url = x.m_map_url;
    m_image_format = x.m_image_format;
    m_map_mode = x.m_map_mode;
    m_free_thresh = x.m_free_thresh;
    m_occupied_thresh = x.m_occupied_thresh;
}

nav2_msgs::srv::SaveMap_Request::SaveMap_Request(
        SaveMap_Request&& x)
{
    m_map_topic = std::move(x.m_map_topic);
    m_map_url = std::move(x.m_map_url);
    m_image_format = std::move(x.m_image_format);
    m_map_mode = std::move(x.m_map_mode);
    m_free_thresh = x.m_free_thresh;
    m_occupied_thresh = x.m_occupied_thresh;
}

nav2_msgs::srv::SaveMap_Request& nav2_msgs::srv::SaveMap_Request::operator =(
        const SaveMap_Request& x)
{

    m_map_topic = x.m_map_topic;
    m_map_url = x.m_map_url;
    m_image_format = x.m_image_format;
    m_map_mode = x.m_map_mode;
    m_free_thresh = x.m_free_thresh;
    m_occupied_thresh = x.m_occupied_thresh;

    return *this;
}

nav2_msgs::srv::SaveMap_Request& nav2_msgs::srv::SaveMap_Request::operator =(
        SaveMap_Request&& x)
{

    m_map_topic = std::move(x.m_map_topic);
    m_map_url = std::move(x.m_map_url);
    m_image_format = std::move(x.m_image_format);
    m_map_mode = std::move(x.m_map_mode);
    m_free_thresh = x.m_free_thresh;
    m_occupied_thresh = x.m_occupied_thresh;

    return *this;
}

bool nav2_msgs::srv::SaveMap_Request::operator ==(
        const SaveMap_Request& x) const
{

    return (m_map_topic == x.m_map_topic && m_map_url == x.m_map_url && m_image_format == x.m_image_format && m_map_mode == x.m_map_mode && m_free_thresh == x.m_free_thresh && m_occupied_thresh == x.m_occupied_thresh);
}

bool nav2_msgs::srv::SaveMap_Request::operator !=(
        const SaveMap_Request& x) const
{
    return !(*this == x);
}

size_t nav2_msgs::srv::SaveMap_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t nav2_msgs::srv::SaveMap_Request::getCdrSerializedSize(
        const nav2_msgs::srv::SaveMap_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_topic().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_url().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.image_format().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.map_mode().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void nav2_msgs::srv::SaveMap_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_map_topic;
    scdr << m_map_url;
    scdr << m_image_format;
    scdr << m_map_mode;
    scdr << m_free_thresh;
    scdr << m_occupied_thresh;

}

void nav2_msgs::srv::SaveMap_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_map_topic;
    dcdr >> m_map_url;
    dcdr >> m_image_format;
    dcdr >> m_map_mode;
    dcdr >> m_free_thresh;
    dcdr >> m_occupied_thresh;
}

/*!
 * @brief This function copies the value in member map_topic
 * @param _map_topic New value to be copied in member map_topic
 */
void nav2_msgs::srv::SaveMap_Request::map_topic(
        const std::string& _map_topic)
{
    m_map_topic = _map_topic;
}

/*!
 * @brief This function moves the value in member map_topic
 * @param _map_topic New value to be moved in member map_topic
 */
void nav2_msgs::srv::SaveMap_Request::map_topic(
        std::string&& _map_topic)
{
    m_map_topic = std::move(_map_topic);
}

/*!
 * @brief This function returns a constant reference to member map_topic
 * @return Constant reference to member map_topic
 */
const std::string& nav2_msgs::srv::SaveMap_Request::map_topic() const
{
    return m_map_topic;
}

/*!
 * @brief This function returns a reference to member map_topic
 * @return Reference to member map_topic
 */
std::string& nav2_msgs::srv::SaveMap_Request::map_topic()
{
    return m_map_topic;
}
/*!
 * @brief This function copies the value in member map_url
 * @param _map_url New value to be copied in member map_url
 */
void nav2_msgs::srv::SaveMap_Request::map_url(
        const std::string& _map_url)
{
    m_map_url = _map_url;
}

/*!
 * @brief This function moves the value in member map_url
 * @param _map_url New value to be moved in member map_url
 */
void nav2_msgs::srv::SaveMap_Request::map_url(
        std::string&& _map_url)
{
    m_map_url = std::move(_map_url);
}

/*!
 * @brief This function returns a constant reference to member map_url
 * @return Constant reference to member map_url
 */
const std::string& nav2_msgs::srv::SaveMap_Request::map_url() const
{
    return m_map_url;
}

/*!
 * @brief This function returns a reference to member map_url
 * @return Reference to member map_url
 */
std::string& nav2_msgs::srv::SaveMap_Request::map_url()
{
    return m_map_url;
}
/*!
 * @brief This function copies the value in member image_format
 * @param _image_format New value to be copied in member image_format
 */
void nav2_msgs::srv::SaveMap_Request::image_format(
        const std::string& _image_format)
{
    m_image_format = _image_format;
}

/*!
 * @brief This function moves the value in member image_format
 * @param _image_format New value to be moved in member image_format
 */
void nav2_msgs::srv::SaveMap_Request::image_format(
        std::string&& _image_format)
{
    m_image_format = std::move(_image_format);
}

/*!
 * @brief This function returns a constant reference to member image_format
 * @return Constant reference to member image_format
 */
const std::string& nav2_msgs::srv::SaveMap_Request::image_format() const
{
    return m_image_format;
}

/*!
 * @brief This function returns a reference to member image_format
 * @return Reference to member image_format
 */
std::string& nav2_msgs::srv::SaveMap_Request::image_format()
{
    return m_image_format;
}
/*!
 * @brief This function copies the value in member map_mode
 * @param _map_mode New value to be copied in member map_mode
 */
void nav2_msgs::srv::SaveMap_Request::map_mode(
        const std::string& _map_mode)
{
    m_map_mode = _map_mode;
}

/*!
 * @brief This function moves the value in member map_mode
 * @param _map_mode New value to be moved in member map_mode
 */
void nav2_msgs::srv::SaveMap_Request::map_mode(
        std::string&& _map_mode)
{
    m_map_mode = std::move(_map_mode);
}

/*!
 * @brief This function returns a constant reference to member map_mode
 * @return Constant reference to member map_mode
 */
const std::string& nav2_msgs::srv::SaveMap_Request::map_mode() const
{
    return m_map_mode;
}

/*!
 * @brief This function returns a reference to member map_mode
 * @return Reference to member map_mode
 */
std::string& nav2_msgs::srv::SaveMap_Request::map_mode()
{
    return m_map_mode;
}
/*!
 * @brief This function sets a value in member free_thresh
 * @param _free_thresh New value for member free_thresh
 */
void nav2_msgs::srv::SaveMap_Request::free_thresh(
        float _free_thresh)
{
    m_free_thresh = _free_thresh;
}

/*!
 * @brief This function returns the value of member free_thresh
 * @return Value of member free_thresh
 */
float nav2_msgs::srv::SaveMap_Request::free_thresh() const
{
    return m_free_thresh;
}

/*!
 * @brief This function returns a reference to member free_thresh
 * @return Reference to member free_thresh
 */
float& nav2_msgs::srv::SaveMap_Request::free_thresh()
{
    return m_free_thresh;
}

/*!
 * @brief This function sets a value in member occupied_thresh
 * @param _occupied_thresh New value for member occupied_thresh
 */
void nav2_msgs::srv::SaveMap_Request::occupied_thresh(
        float _occupied_thresh)
{
    m_occupied_thresh = _occupied_thresh;
}

/*!
 * @brief This function returns the value of member occupied_thresh
 * @return Value of member occupied_thresh
 */
float nav2_msgs::srv::SaveMap_Request::occupied_thresh() const
{
    return m_occupied_thresh;
}

/*!
 * @brief This function returns a reference to member occupied_thresh
 * @return Reference to member occupied_thresh
 */
float& nav2_msgs::srv::SaveMap_Request::occupied_thresh()
{
    return m_occupied_thresh;
}


size_t nav2_msgs::srv::SaveMap_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav2_msgs::srv::SaveMap_Request::isKeyDefined()
{
    return false;
}

void nav2_msgs::srv::SaveMap_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}

nav2_msgs::srv::SaveMap_Response::SaveMap_Response()
{
    // m_result com.eprosima.idl.parser.typecode.PrimitiveTypeCode@49070868
    m_result = false;

}

nav2_msgs::srv::SaveMap_Response::~SaveMap_Response()
{
}

nav2_msgs::srv::SaveMap_Response::SaveMap_Response(
        const SaveMap_Response& x)
{
    m_result = x.m_result;
}

nav2_msgs::srv::SaveMap_Response::SaveMap_Response(
        SaveMap_Response&& x)
{
    m_result = x.m_result;
}

nav2_msgs::srv::SaveMap_Response& nav2_msgs::srv::SaveMap_Response::operator =(
        const SaveMap_Response& x)
{

    m_result = x.m_result;

    return *this;
}

nav2_msgs::srv::SaveMap_Response& nav2_msgs::srv::SaveMap_Response::operator =(
        SaveMap_Response&& x)
{

    m_result = x.m_result;

    return *this;
}

bool nav2_msgs::srv::SaveMap_Response::operator ==(
        const SaveMap_Response& x) const
{

    return (m_result == x.m_result);
}

bool nav2_msgs::srv::SaveMap_Response::operator !=(
        const SaveMap_Response& x) const
{
    return !(*this == x);
}

size_t nav2_msgs::srv::SaveMap_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t nav2_msgs::srv::SaveMap_Response::getCdrSerializedSize(
        const nav2_msgs::srv::SaveMap_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void nav2_msgs::srv::SaveMap_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_result;

}

void nav2_msgs::srv::SaveMap_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_result;
}

/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void nav2_msgs::srv::SaveMap_Response::result(
        bool _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
bool nav2_msgs::srv::SaveMap_Response::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
bool& nav2_msgs::srv::SaveMap_Response::result()
{
    return m_result;
}


size_t nav2_msgs::srv::SaveMap_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav2_msgs::srv::SaveMap_Response::isKeyDefined()
{
    return false;
}

void nav2_msgs::srv::SaveMap_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


