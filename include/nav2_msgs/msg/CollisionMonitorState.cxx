// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CollisionMonitorState.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CollisionMonitorState.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






nav2_msgs::msg::CollisionMonitorState::CollisionMonitorState()
{
    // m_action_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@16267862
    m_action_type = 0;
    // m_polygon_name com.eprosima.idl.parser.typecode.StringTypeCode@442675e1
    m_polygon_name ="";

}

nav2_msgs::msg::CollisionMonitorState::~CollisionMonitorState()
{

}

nav2_msgs::msg::CollisionMonitorState::CollisionMonitorState(
        const CollisionMonitorState& x)
{
    m_action_type = x.m_action_type;
    m_polygon_name = x.m_polygon_name;
}

nav2_msgs::msg::CollisionMonitorState::CollisionMonitorState(
        CollisionMonitorState&& x)
{
    m_action_type = x.m_action_type;
    m_polygon_name = std::move(x.m_polygon_name);
}

nav2_msgs::msg::CollisionMonitorState& nav2_msgs::msg::CollisionMonitorState::operator =(
        const CollisionMonitorState& x)
{

    m_action_type = x.m_action_type;
    m_polygon_name = x.m_polygon_name;

    return *this;
}

nav2_msgs::msg::CollisionMonitorState& nav2_msgs::msg::CollisionMonitorState::operator =(
        CollisionMonitorState&& x)
{

    m_action_type = x.m_action_type;
    m_polygon_name = std::move(x.m_polygon_name);

    return *this;
}

bool nav2_msgs::msg::CollisionMonitorState::operator ==(
        const CollisionMonitorState& x) const
{

    return (m_action_type == x.m_action_type && m_polygon_name == x.m_polygon_name);
}

bool nav2_msgs::msg::CollisionMonitorState::operator !=(
        const CollisionMonitorState& x) const
{
    return !(*this == x);
}

size_t nav2_msgs::msg::CollisionMonitorState::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t nav2_msgs::msg::CollisionMonitorState::getCdrSerializedSize(
        const nav2_msgs::msg::CollisionMonitorState& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.polygon_name().size() + 1;


    return current_alignment - initial_alignment;
}

void nav2_msgs::msg::CollisionMonitorState::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_action_type;
    scdr << m_polygon_name;

}

void nav2_msgs::msg::CollisionMonitorState::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_action_type;
    dcdr >> m_polygon_name;
}

/*!
 * @brief This function sets a value in member action_type
 * @param _action_type New value for member action_type
 */
void nav2_msgs::msg::CollisionMonitorState::action_type(
        uint8_t _action_type)
{
    m_action_type = _action_type;
}

/*!
 * @brief This function returns the value of member action_type
 * @return Value of member action_type
 */
uint8_t nav2_msgs::msg::CollisionMonitorState::action_type() const
{
    return m_action_type;
}

/*!
 * @brief This function returns a reference to member action_type
 * @return Reference to member action_type
 */
uint8_t& nav2_msgs::msg::CollisionMonitorState::action_type()
{
    return m_action_type;
}

/*!
 * @brief This function copies the value in member polygon_name
 * @param _polygon_name New value to be copied in member polygon_name
 */
void nav2_msgs::msg::CollisionMonitorState::polygon_name(
        const std::string& _polygon_name)
{
    m_polygon_name = _polygon_name;
}

/*!
 * @brief This function moves the value in member polygon_name
 * @param _polygon_name New value to be moved in member polygon_name
 */
void nav2_msgs::msg::CollisionMonitorState::polygon_name(
        std::string&& _polygon_name)
{
    m_polygon_name = std::move(_polygon_name);
}

/*!
 * @brief This function returns a constant reference to member polygon_name
 * @return Constant reference to member polygon_name
 */
const std::string& nav2_msgs::msg::CollisionMonitorState::polygon_name() const
{
    return m_polygon_name;
}

/*!
 * @brief This function returns a reference to member polygon_name
 * @return Reference to member polygon_name
 */
std::string& nav2_msgs::msg::CollisionMonitorState::polygon_name()
{
    return m_polygon_name;
}

size_t nav2_msgs::msg::CollisionMonitorState::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool nav2_msgs::msg::CollisionMonitorState::isKeyDefined()
{
    return false;
}

void nav2_msgs::msg::CollisionMonitorState::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


