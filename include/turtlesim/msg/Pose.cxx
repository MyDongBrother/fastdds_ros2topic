// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Pose.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Pose.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

turtlesim::msg::Pose::Pose()
{
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d371b2d
    m_y = 0.0;
    // m_theta com.eprosima.idl.parser.typecode.PrimitiveTypeCode@543c6f6d
    m_theta = 0.0;
    // m_linear_velocity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13eb8acf
    m_linear_velocity = 0.0;
    // m_angular_velocity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_angular_velocity = 0.0;

}

turtlesim::msg::Pose::~Pose()
{




}

turtlesim::msg::Pose::Pose(
        const Pose& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
    m_linear_velocity = x.m_linear_velocity;
    m_angular_velocity = x.m_angular_velocity;
}

turtlesim::msg::Pose::Pose(
        Pose&& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
    m_linear_velocity = x.m_linear_velocity;
    m_angular_velocity = x.m_angular_velocity;
}

turtlesim::msg::Pose& turtlesim::msg::Pose::operator =(
        const Pose& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
    m_linear_velocity = x.m_linear_velocity;
    m_angular_velocity = x.m_angular_velocity;

    return *this;
}

turtlesim::msg::Pose& turtlesim::msg::Pose::operator =(
        Pose&& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
    m_linear_velocity = x.m_linear_velocity;
    m_angular_velocity = x.m_angular_velocity;

    return *this;
}

bool turtlesim::msg::Pose::operator ==(
        const Pose& x) const
{

    return (m_x == x.m_x && m_y == x.m_y && m_theta == x.m_theta && m_linear_velocity == x.m_linear_velocity && m_angular_velocity == x.m_angular_velocity);
}

bool turtlesim::msg::Pose::operator !=(
        const Pose& x) const
{
    return !(*this == x);
}

size_t turtlesim::msg::Pose::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t turtlesim::msg::Pose::getCdrSerializedSize(
        const turtlesim::msg::Pose& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void turtlesim::msg::Pose::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x;
    scdr << m_y;
    scdr << m_theta;
    scdr << m_linear_velocity;
    scdr << m_angular_velocity;

}

void turtlesim::msg::Pose::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_theta;
    dcdr >> m_linear_velocity;
    dcdr >> m_angular_velocity;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void turtlesim::msg::Pose::x(
        float _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float turtlesim::msg::Pose::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& turtlesim::msg::Pose::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void turtlesim::msg::Pose::y(
        float _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float turtlesim::msg::Pose::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& turtlesim::msg::Pose::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member theta
 * @param _theta New value for member theta
 */
void turtlesim::msg::Pose::theta(
        float _theta)
{
    m_theta = _theta;
}

/*!
 * @brief This function returns the value of member theta
 * @return Value of member theta
 */
float turtlesim::msg::Pose::theta() const
{
    return m_theta;
}

/*!
 * @brief This function returns a reference to member theta
 * @return Reference to member theta
 */
float& turtlesim::msg::Pose::theta()
{
    return m_theta;
}

/*!
 * @brief This function sets a value in member linear_velocity
 * @param _linear_velocity New value for member linear_velocity
 */
void turtlesim::msg::Pose::linear_velocity(
        float _linear_velocity)
{
    m_linear_velocity = _linear_velocity;
}

/*!
 * @brief This function returns the value of member linear_velocity
 * @return Value of member linear_velocity
 */
float turtlesim::msg::Pose::linear_velocity() const
{
    return m_linear_velocity;
}

/*!
 * @brief This function returns a reference to member linear_velocity
 * @return Reference to member linear_velocity
 */
float& turtlesim::msg::Pose::linear_velocity()
{
    return m_linear_velocity;
}

/*!
 * @brief This function sets a value in member angular_velocity
 * @param _angular_velocity New value for member angular_velocity
 */
void turtlesim::msg::Pose::angular_velocity(
        float _angular_velocity)
{
    m_angular_velocity = _angular_velocity;
}

/*!
 * @brief This function returns the value of member angular_velocity
 * @return Value of member angular_velocity
 */
float turtlesim::msg::Pose::angular_velocity() const
{
    return m_angular_velocity;
}

/*!
 * @brief This function returns a reference to member angular_velocity
 * @return Reference to member angular_velocity
 */
float& turtlesim::msg::Pose::angular_velocity()
{
    return m_angular_velocity;
}


size_t turtlesim::msg::Pose::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::msg::Pose::isKeyDefined()
{
    return false;
}

void turtlesim::msg::Pose::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


