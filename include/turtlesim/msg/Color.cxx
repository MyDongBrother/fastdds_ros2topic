// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Color.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Color.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

turtlesim::msg::Color::Color()
{
    // m_r com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_r = 0;
    // m_g com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_g = 0;
    // m_b com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_b = 0;

}

turtlesim::msg::Color::~Color()
{


}

turtlesim::msg::Color::Color(
        const Color& x)
{
    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
}

turtlesim::msg::Color::Color(
        Color&& x)
{
    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
}

turtlesim::msg::Color& turtlesim::msg::Color::operator =(
        const Color& x)
{

    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;

    return *this;
}

turtlesim::msg::Color& turtlesim::msg::Color::operator =(
        Color&& x)
{

    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;

    return *this;
}

bool turtlesim::msg::Color::operator ==(
        const Color& x) const
{

    return (m_r == x.m_r && m_g == x.m_g && m_b == x.m_b);
}

bool turtlesim::msg::Color::operator !=(
        const Color& x) const
{
    return !(*this == x);
}

size_t turtlesim::msg::Color::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t turtlesim::msg::Color::getCdrSerializedSize(
        const turtlesim::msg::Color& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void turtlesim::msg::Color::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_r;
    scdr << m_g;
    scdr << m_b;

}

void turtlesim::msg::Color::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_r;
    dcdr >> m_g;
    dcdr >> m_b;
}

/*!
 * @brief This function sets a value in member r
 * @param _r New value for member r
 */
void turtlesim::msg::Color::r(
        uint8_t _r)
{
    m_r = _r;
}

/*!
 * @brief This function returns the value of member r
 * @return Value of member r
 */
uint8_t turtlesim::msg::Color::r() const
{
    return m_r;
}

/*!
 * @brief This function returns a reference to member r
 * @return Reference to member r
 */
uint8_t& turtlesim::msg::Color::r()
{
    return m_r;
}

/*!
 * @brief This function sets a value in member g
 * @param _g New value for member g
 */
void turtlesim::msg::Color::g(
        uint8_t _g)
{
    m_g = _g;
}

/*!
 * @brief This function returns the value of member g
 * @return Value of member g
 */
uint8_t turtlesim::msg::Color::g() const
{
    return m_g;
}

/*!
 * @brief This function returns a reference to member g
 * @return Reference to member g
 */
uint8_t& turtlesim::msg::Color::g()
{
    return m_g;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void turtlesim::msg::Color::b(
        uint8_t _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
uint8_t turtlesim::msg::Color::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
uint8_t& turtlesim::msg::Color::b()
{
    return m_b;
}


size_t turtlesim::msg::Color::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::msg::Color::isKeyDefined()
{
    return false;
}

void turtlesim::msg::Color::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


