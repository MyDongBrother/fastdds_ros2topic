// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SetPen.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SetPen.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

turtlesim::srv::SetPen_Request::SetPen_Request()
{
    // m_r com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43738a82
    m_r = 0;
    // m_g com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c81cdd1
    m_g = 0;
    // m_b com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1fc2b765
    m_b = 0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@75881071
    m_width = 0;
    // m_off com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a70a3d8
    m_off = 0;

}

turtlesim::srv::SetPen_Request::~SetPen_Request()
{




}

turtlesim::srv::SetPen_Request::SetPen_Request(
        const SetPen_Request& x)
{
    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
    m_width = x.m_width;
    m_off = x.m_off;
}

turtlesim::srv::SetPen_Request::SetPen_Request(
        SetPen_Request&& x)
{
    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
    m_width = x.m_width;
    m_off = x.m_off;
}

turtlesim::srv::SetPen_Request& turtlesim::srv::SetPen_Request::operator =(
        const SetPen_Request& x)
{

    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
    m_width = x.m_width;
    m_off = x.m_off;

    return *this;
}

turtlesim::srv::SetPen_Request& turtlesim::srv::SetPen_Request::operator =(
        SetPen_Request&& x)
{

    m_r = x.m_r;
    m_g = x.m_g;
    m_b = x.m_b;
    m_width = x.m_width;
    m_off = x.m_off;

    return *this;
}

bool turtlesim::srv::SetPen_Request::operator ==(
        const SetPen_Request& x) const
{

    return (m_r == x.m_r && m_g == x.m_g && m_b == x.m_b && m_width == x.m_width && m_off == x.m_off);
}

bool turtlesim::srv::SetPen_Request::operator !=(
        const SetPen_Request& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::SetPen_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::SetPen_Request::getCdrSerializedSize(
        const turtlesim::srv::SetPen_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void turtlesim::srv::SetPen_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_r;
    scdr << m_g;
    scdr << m_b;
    scdr << m_width;
    scdr << m_off;

}

void turtlesim::srv::SetPen_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_r;
    dcdr >> m_g;
    dcdr >> m_b;
    dcdr >> m_width;
    dcdr >> m_off;
}

/*!
 * @brief This function sets a value in member r
 * @param _r New value for member r
 */
void turtlesim::srv::SetPen_Request::r(
        uint8_t _r)
{
    m_r = _r;
}

/*!
 * @brief This function returns the value of member r
 * @return Value of member r
 */
uint8_t turtlesim::srv::SetPen_Request::r() const
{
    return m_r;
}

/*!
 * @brief This function returns a reference to member r
 * @return Reference to member r
 */
uint8_t& turtlesim::srv::SetPen_Request::r()
{
    return m_r;
}

/*!
 * @brief This function sets a value in member g
 * @param _g New value for member g
 */
void turtlesim::srv::SetPen_Request::g(
        uint8_t _g)
{
    m_g = _g;
}

/*!
 * @brief This function returns the value of member g
 * @return Value of member g
 */
uint8_t turtlesim::srv::SetPen_Request::g() const
{
    return m_g;
}

/*!
 * @brief This function returns a reference to member g
 * @return Reference to member g
 */
uint8_t& turtlesim::srv::SetPen_Request::g()
{
    return m_g;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void turtlesim::srv::SetPen_Request::b(
        uint8_t _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
uint8_t turtlesim::srv::SetPen_Request::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
uint8_t& turtlesim::srv::SetPen_Request::b()
{
    return m_b;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void turtlesim::srv::SetPen_Request::width(
        uint8_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint8_t turtlesim::srv::SetPen_Request::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint8_t& turtlesim::srv::SetPen_Request::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member off
 * @param _off New value for member off
 */
void turtlesim::srv::SetPen_Request::off(
        uint8_t _off)
{
    m_off = _off;
}

/*!
 * @brief This function returns the value of member off
 * @return Value of member off
 */
uint8_t turtlesim::srv::SetPen_Request::off() const
{
    return m_off;
}

/*!
 * @brief This function returns a reference to member off
 * @return Reference to member off
 */
uint8_t& turtlesim::srv::SetPen_Request::off()
{
    return m_off;
}


size_t turtlesim::srv::SetPen_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::SetPen_Request::isKeyDefined()
{
    return false;
}

void turtlesim::srv::SetPen_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}

turtlesim::srv::SetPen_Response::SetPen_Response()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@43a0cee9
    m_structure_needs_at_least_one_member = 0;

}

turtlesim::srv::SetPen_Response::~SetPen_Response()
{
}

turtlesim::srv::SetPen_Response::SetPen_Response(
        const SetPen_Response& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::SetPen_Response::SetPen_Response(
        SetPen_Response&& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::SetPen_Response& turtlesim::srv::SetPen_Response::operator =(
        const SetPen_Response& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

turtlesim::srv::SetPen_Response& turtlesim::srv::SetPen_Response::operator =(
        SetPen_Response&& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool turtlesim::srv::SetPen_Response::operator ==(
        const SetPen_Response& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool turtlesim::srv::SetPen_Response::operator !=(
        const SetPen_Response& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::SetPen_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::SetPen_Response::getCdrSerializedSize(
        const turtlesim::srv::SetPen_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void turtlesim::srv::SetPen_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void turtlesim::srv::SetPen_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void turtlesim::srv::SetPen_Response::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t turtlesim::srv::SetPen_Response::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& turtlesim::srv::SetPen_Response::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t turtlesim::srv::SetPen_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::SetPen_Response::isKeyDefined()
{
    return false;
}

void turtlesim::srv::SetPen_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


