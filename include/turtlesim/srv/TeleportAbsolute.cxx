// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TeleportAbsolute.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TeleportAbsolute.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

turtlesim::srv::TeleportAbsolute_Request::TeleportAbsolute_Request()
{
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28ac3dc3
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_y = 0.0;
    // m_theta com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_theta = 0.0;

}

turtlesim::srv::TeleportAbsolute_Request::~TeleportAbsolute_Request()
{


}

turtlesim::srv::TeleportAbsolute_Request::TeleportAbsolute_Request(
        const TeleportAbsolute_Request& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
}

turtlesim::srv::TeleportAbsolute_Request::TeleportAbsolute_Request(
        TeleportAbsolute_Request&& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;
}

turtlesim::srv::TeleportAbsolute_Request& turtlesim::srv::TeleportAbsolute_Request::operator =(
        const TeleportAbsolute_Request& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;

    return *this;
}

turtlesim::srv::TeleportAbsolute_Request& turtlesim::srv::TeleportAbsolute_Request::operator =(
        TeleportAbsolute_Request&& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_theta = x.m_theta;

    return *this;
}

bool turtlesim::srv::TeleportAbsolute_Request::operator ==(
        const TeleportAbsolute_Request& x) const
{

    return (m_x == x.m_x && m_y == x.m_y && m_theta == x.m_theta);
}

bool turtlesim::srv::TeleportAbsolute_Request::operator !=(
        const TeleportAbsolute_Request& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::TeleportAbsolute_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::TeleportAbsolute_Request::getCdrSerializedSize(
        const turtlesim::srv::TeleportAbsolute_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void turtlesim::srv::TeleportAbsolute_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x;
    scdr << m_y;
    scdr << m_theta;

}

void turtlesim::srv::TeleportAbsolute_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_theta;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void turtlesim::srv::TeleportAbsolute_Request::x(
        float _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
float turtlesim::srv::TeleportAbsolute_Request::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
float& turtlesim::srv::TeleportAbsolute_Request::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void turtlesim::srv::TeleportAbsolute_Request::y(
        float _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
float turtlesim::srv::TeleportAbsolute_Request::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
float& turtlesim::srv::TeleportAbsolute_Request::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member theta
 * @param _theta New value for member theta
 */
void turtlesim::srv::TeleportAbsolute_Request::theta(
        float _theta)
{
    m_theta = _theta;
}

/*!
 * @brief This function returns the value of member theta
 * @return Value of member theta
 */
float turtlesim::srv::TeleportAbsolute_Request::theta() const
{
    return m_theta;
}

/*!
 * @brief This function returns a reference to member theta
 * @return Reference to member theta
 */
float& turtlesim::srv::TeleportAbsolute_Request::theta()
{
    return m_theta;
}


size_t turtlesim::srv::TeleportAbsolute_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::TeleportAbsolute_Request::isKeyDefined()
{
    return false;
}

void turtlesim::srv::TeleportAbsolute_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

turtlesim::srv::TeleportAbsolute_Response::TeleportAbsolute_Response()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@42607a4f
    m_structure_needs_at_least_one_member = 0;

}

turtlesim::srv::TeleportAbsolute_Response::~TeleportAbsolute_Response()
{
}

turtlesim::srv::TeleportAbsolute_Response::TeleportAbsolute_Response(
        const TeleportAbsolute_Response& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::TeleportAbsolute_Response::TeleportAbsolute_Response(
        TeleportAbsolute_Response&& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::TeleportAbsolute_Response& turtlesim::srv::TeleportAbsolute_Response::operator =(
        const TeleportAbsolute_Response& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

turtlesim::srv::TeleportAbsolute_Response& turtlesim::srv::TeleportAbsolute_Response::operator =(
        TeleportAbsolute_Response&& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool turtlesim::srv::TeleportAbsolute_Response::operator ==(
        const TeleportAbsolute_Response& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool turtlesim::srv::TeleportAbsolute_Response::operator !=(
        const TeleportAbsolute_Response& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::TeleportAbsolute_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::TeleportAbsolute_Response::getCdrSerializedSize(
        const turtlesim::srv::TeleportAbsolute_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void turtlesim::srv::TeleportAbsolute_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void turtlesim::srv::TeleportAbsolute_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void turtlesim::srv::TeleportAbsolute_Response::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t turtlesim::srv::TeleportAbsolute_Response::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& turtlesim::srv::TeleportAbsolute_Response::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t turtlesim::srv::TeleportAbsolute_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::TeleportAbsolute_Response::isKeyDefined()
{
    return false;
}

void turtlesim::srv::TeleportAbsolute_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


