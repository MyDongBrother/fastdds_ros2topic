// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TeleportRelative.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TeleportRelative.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

turtlesim::srv::TeleportRelative_Request::TeleportRelative_Request()
{
    // m_linear com.eprosima.idl.parser.typecode.PrimitiveTypeCode@74a10858
    m_linear = 0.0;
    // m_angular com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_angular = 0.0;

}

turtlesim::srv::TeleportRelative_Request::~TeleportRelative_Request()
{

}

turtlesim::srv::TeleportRelative_Request::TeleportRelative_Request(
        const TeleportRelative_Request& x)
{
    m_linear = x.m_linear;
    m_angular = x.m_angular;
}

turtlesim::srv::TeleportRelative_Request::TeleportRelative_Request(
        TeleportRelative_Request&& x)
{
    m_linear = x.m_linear;
    m_angular = x.m_angular;
}

turtlesim::srv::TeleportRelative_Request& turtlesim::srv::TeleportRelative_Request::operator =(
        const TeleportRelative_Request& x)
{

    m_linear = x.m_linear;
    m_angular = x.m_angular;

    return *this;
}

turtlesim::srv::TeleportRelative_Request& turtlesim::srv::TeleportRelative_Request::operator =(
        TeleportRelative_Request&& x)
{

    m_linear = x.m_linear;
    m_angular = x.m_angular;

    return *this;
}

bool turtlesim::srv::TeleportRelative_Request::operator ==(
        const TeleportRelative_Request& x) const
{

    return (m_linear == x.m_linear && m_angular == x.m_angular);
}

bool turtlesim::srv::TeleportRelative_Request::operator !=(
        const TeleportRelative_Request& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::TeleportRelative_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::TeleportRelative_Request::getCdrSerializedSize(
        const turtlesim::srv::TeleportRelative_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void turtlesim::srv::TeleportRelative_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_linear;
    scdr << m_angular;

}

void turtlesim::srv::TeleportRelative_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_linear;
    dcdr >> m_angular;
}

/*!
 * @brief This function sets a value in member linear
 * @param _linear New value for member linear
 */
void turtlesim::srv::TeleportRelative_Request::linear(
        float _linear)
{
    m_linear = _linear;
}

/*!
 * @brief This function returns the value of member linear
 * @return Value of member linear
 */
float turtlesim::srv::TeleportRelative_Request::linear() const
{
    return m_linear;
}

/*!
 * @brief This function returns a reference to member linear
 * @return Reference to member linear
 */
float& turtlesim::srv::TeleportRelative_Request::linear()
{
    return m_linear;
}

/*!
 * @brief This function sets a value in member angular
 * @param _angular New value for member angular
 */
void turtlesim::srv::TeleportRelative_Request::angular(
        float _angular)
{
    m_angular = _angular;
}

/*!
 * @brief This function returns the value of member angular
 * @return Value of member angular
 */
float turtlesim::srv::TeleportRelative_Request::angular() const
{
    return m_angular;
}

/*!
 * @brief This function returns a reference to member angular
 * @return Reference to member angular
 */
float& turtlesim::srv::TeleportRelative_Request::angular()
{
    return m_angular;
}


size_t turtlesim::srv::TeleportRelative_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::TeleportRelative_Request::isKeyDefined()
{
    return false;
}

void turtlesim::srv::TeleportRelative_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

turtlesim::srv::TeleportRelative_Response::TeleportRelative_Response()
{
    // m_structure_needs_at_least_one_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4fb64261
    m_structure_needs_at_least_one_member = 0;

}

turtlesim::srv::TeleportRelative_Response::~TeleportRelative_Response()
{
}

turtlesim::srv::TeleportRelative_Response::TeleportRelative_Response(
        const TeleportRelative_Response& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::TeleportRelative_Response::TeleportRelative_Response(
        TeleportRelative_Response&& x)
{
    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;
}

turtlesim::srv::TeleportRelative_Response& turtlesim::srv::TeleportRelative_Response::operator =(
        const TeleportRelative_Response& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

turtlesim::srv::TeleportRelative_Response& turtlesim::srv::TeleportRelative_Response::operator =(
        TeleportRelative_Response&& x)
{

    m_structure_needs_at_least_one_member = x.m_structure_needs_at_least_one_member;

    return *this;
}

bool turtlesim::srv::TeleportRelative_Response::operator ==(
        const TeleportRelative_Response& x) const
{

    return (m_structure_needs_at_least_one_member == x.m_structure_needs_at_least_one_member);
}

bool turtlesim::srv::TeleportRelative_Response::operator !=(
        const TeleportRelative_Response& x) const
{
    return !(*this == x);
}

size_t turtlesim::srv::TeleportRelative_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t turtlesim::srv::TeleportRelative_Response::getCdrSerializedSize(
        const turtlesim::srv::TeleportRelative_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void turtlesim::srv::TeleportRelative_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_structure_needs_at_least_one_member;

}

void turtlesim::srv::TeleportRelative_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function sets a value in member structure_needs_at_least_one_member
 * @param _structure_needs_at_least_one_member New value for member structure_needs_at_least_one_member
 */
void turtlesim::srv::TeleportRelative_Response::structure_needs_at_least_one_member(
        uint8_t _structure_needs_at_least_one_member)
{
    m_structure_needs_at_least_one_member = _structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns the value of member structure_needs_at_least_one_member
 * @return Value of member structure_needs_at_least_one_member
 */
uint8_t turtlesim::srv::TeleportRelative_Response::structure_needs_at_least_one_member() const
{
    return m_structure_needs_at_least_one_member;
}

/*!
 * @brief This function returns a reference to member structure_needs_at_least_one_member
 * @return Reference to member structure_needs_at_least_one_member
 */
uint8_t& turtlesim::srv::TeleportRelative_Response::structure_needs_at_least_one_member()
{
    return m_structure_needs_at_least_one_member;
}


size_t turtlesim::srv::TeleportRelative_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool turtlesim::srv::TeleportRelative_Response::isKeyDefined()
{
    return false;
}

void turtlesim::srv::TeleportRelative_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


