// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ConfigLogger.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ConfigLogger.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

logging_demo::srv::ConfigLogger_Request::ConfigLogger_Request()
{
    // m_logger_name com.eprosima.idl.parser.typecode.StringTypeCode@569cfc36
    m_logger_name ="";
    // m_level com.eprosima.idl.parser.typecode.StringTypeCode@64f6106c
    m_level ="";

}

logging_demo::srv::ConfigLogger_Request::~ConfigLogger_Request()
{

}

logging_demo::srv::ConfigLogger_Request::ConfigLogger_Request(
        const ConfigLogger_Request& x)
{
    m_logger_name = x.m_logger_name;
    m_level = x.m_level;
}

logging_demo::srv::ConfigLogger_Request::ConfigLogger_Request(
        ConfigLogger_Request&& x)
{
    m_logger_name = std::move(x.m_logger_name);
    m_level = std::move(x.m_level);
}

logging_demo::srv::ConfigLogger_Request& logging_demo::srv::ConfigLogger_Request::operator =(
        const ConfigLogger_Request& x)
{

    m_logger_name = x.m_logger_name;
    m_level = x.m_level;

    return *this;
}

logging_demo::srv::ConfigLogger_Request& logging_demo::srv::ConfigLogger_Request::operator =(
        ConfigLogger_Request&& x)
{

    m_logger_name = std::move(x.m_logger_name);
    m_level = std::move(x.m_level);

    return *this;
}

bool logging_demo::srv::ConfigLogger_Request::operator ==(
        const ConfigLogger_Request& x) const
{

    return (m_logger_name == x.m_logger_name && m_level == x.m_level);
}

bool logging_demo::srv::ConfigLogger_Request::operator !=(
        const ConfigLogger_Request& x) const
{
    return !(*this == x);
}

size_t logging_demo::srv::ConfigLogger_Request::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t logging_demo::srv::ConfigLogger_Request::getCdrSerializedSize(
        const logging_demo::srv::ConfigLogger_Request& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.logger_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.level().size() + 1;


    return current_alignment - initial_alignment;
}

void logging_demo::srv::ConfigLogger_Request::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_logger_name;
    scdr << m_level;

}

void logging_demo::srv::ConfigLogger_Request::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_logger_name;
    dcdr >> m_level;
}

/*!
 * @brief This function copies the value in member logger_name
 * @param _logger_name New value to be copied in member logger_name
 */
void logging_demo::srv::ConfigLogger_Request::logger_name(
        const std::string& _logger_name)
{
    m_logger_name = _logger_name;
}

/*!
 * @brief This function moves the value in member logger_name
 * @param _logger_name New value to be moved in member logger_name
 */
void logging_demo::srv::ConfigLogger_Request::logger_name(
        std::string&& _logger_name)
{
    m_logger_name = std::move(_logger_name);
}

/*!
 * @brief This function returns a constant reference to member logger_name
 * @return Constant reference to member logger_name
 */
const std::string& logging_demo::srv::ConfigLogger_Request::logger_name() const
{
    return m_logger_name;
}

/*!
 * @brief This function returns a reference to member logger_name
 * @return Reference to member logger_name
 */
std::string& logging_demo::srv::ConfigLogger_Request::logger_name()
{
    return m_logger_name;
}
/*!
 * @brief This function copies the value in member level
 * @param _level New value to be copied in member level
 */
void logging_demo::srv::ConfigLogger_Request::level(
        const std::string& _level)
{
    m_level = _level;
}

/*!
 * @brief This function moves the value in member level
 * @param _level New value to be moved in member level
 */
void logging_demo::srv::ConfigLogger_Request::level(
        std::string&& _level)
{
    m_level = std::move(_level);
}

/*!
 * @brief This function returns a constant reference to member level
 * @return Constant reference to member level
 */
const std::string& logging_demo::srv::ConfigLogger_Request::level() const
{
    return m_level;
}

/*!
 * @brief This function returns a reference to member level
 * @return Reference to member level
 */
std::string& logging_demo::srv::ConfigLogger_Request::level()
{
    return m_level;
}

size_t logging_demo::srv::ConfigLogger_Request::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool logging_demo::srv::ConfigLogger_Request::isKeyDefined()
{
    return false;
}

void logging_demo::srv::ConfigLogger_Request::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

logging_demo::srv::ConfigLogger_Response::ConfigLogger_Response()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25bbf683
    m_success = false;

}

logging_demo::srv::ConfigLogger_Response::~ConfigLogger_Response()
{
}

logging_demo::srv::ConfigLogger_Response::ConfigLogger_Response(
        const ConfigLogger_Response& x)
{
    m_success = x.m_success;
}

logging_demo::srv::ConfigLogger_Response::ConfigLogger_Response(
        ConfigLogger_Response&& x)
{
    m_success = x.m_success;
}

logging_demo::srv::ConfigLogger_Response& logging_demo::srv::ConfigLogger_Response::operator =(
        const ConfigLogger_Response& x)
{

    m_success = x.m_success;

    return *this;
}

logging_demo::srv::ConfigLogger_Response& logging_demo::srv::ConfigLogger_Response::operator =(
        ConfigLogger_Response&& x)
{

    m_success = x.m_success;

    return *this;
}

bool logging_demo::srv::ConfigLogger_Response::operator ==(
        const ConfigLogger_Response& x) const
{

    return (m_success == x.m_success);
}

bool logging_demo::srv::ConfigLogger_Response::operator !=(
        const ConfigLogger_Response& x) const
{
    return !(*this == x);
}

size_t logging_demo::srv::ConfigLogger_Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t logging_demo::srv::ConfigLogger_Response::getCdrSerializedSize(
        const logging_demo::srv::ConfigLogger_Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void logging_demo::srv::ConfigLogger_Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_success;

}

void logging_demo::srv::ConfigLogger_Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_success;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void logging_demo::srv::ConfigLogger_Response::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool logging_demo::srv::ConfigLogger_Response::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& logging_demo::srv::ConfigLogger_Response::success()
{
    return m_success;
}


size_t logging_demo::srv::ConfigLogger_Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool logging_demo::srv::ConfigLogger_Response::isKeyDefined()
{
    return false;
}

void logging_demo::srv::ConfigLogger_Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


