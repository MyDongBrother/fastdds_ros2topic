// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ProjectedMapInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ProjectedMapInfo.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

map_msgs::msg::ProjectedMapInfo::ProjectedMapInfo()
{
    // m_frame_id com.eprosima.idl.parser.typecode.StringTypeCode@22eeefeb
    m_frame_id ="";
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@17d0685f
    m_x = 0.0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3891771e
    m_y = 0.0;
    // m_width com.eprosima.idl.parser.typecode.PrimitiveTypeCode@78ac1102
    m_width = 0.0;
    // m_height com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2de8284b
    m_height = 0.0;
    // m_min_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@396e2f39
    m_min_z = 0.0;
    // m_max_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a74868d
    m_max_z = 0.0;

}

map_msgs::msg::ProjectedMapInfo::~ProjectedMapInfo()
{






}

map_msgs::msg::ProjectedMapInfo::ProjectedMapInfo(
        const ProjectedMapInfo& x)
{
    m_frame_id = x.m_frame_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_width = x.m_width;
    m_height = x.m_height;
    m_min_z = x.m_min_z;
    m_max_z = x.m_max_z;
}

map_msgs::msg::ProjectedMapInfo::ProjectedMapInfo(
        ProjectedMapInfo&& x)
{
    m_frame_id = std::move(x.m_frame_id);
    m_x = x.m_x;
    m_y = x.m_y;
    m_width = x.m_width;
    m_height = x.m_height;
    m_min_z = x.m_min_z;
    m_max_z = x.m_max_z;
}

map_msgs::msg::ProjectedMapInfo& map_msgs::msg::ProjectedMapInfo::operator =(
        const ProjectedMapInfo& x)
{

    m_frame_id = x.m_frame_id;
    m_x = x.m_x;
    m_y = x.m_y;
    m_width = x.m_width;
    m_height = x.m_height;
    m_min_z = x.m_min_z;
    m_max_z = x.m_max_z;

    return *this;
}

map_msgs::msg::ProjectedMapInfo& map_msgs::msg::ProjectedMapInfo::operator =(
        ProjectedMapInfo&& x)
{

    m_frame_id = std::move(x.m_frame_id);
    m_x = x.m_x;
    m_y = x.m_y;
    m_width = x.m_width;
    m_height = x.m_height;
    m_min_z = x.m_min_z;
    m_max_z = x.m_max_z;

    return *this;
}

bool map_msgs::msg::ProjectedMapInfo::operator ==(
        const ProjectedMapInfo& x) const
{

    return (m_frame_id == x.m_frame_id && m_x == x.m_x && m_y == x.m_y && m_width == x.m_width && m_height == x.m_height && m_min_z == x.m_min_z && m_max_z == x.m_max_z);
}

bool map_msgs::msg::ProjectedMapInfo::operator !=(
        const ProjectedMapInfo& x) const
{
    return !(*this == x);
}

size_t map_msgs::msg::ProjectedMapInfo::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t map_msgs::msg::ProjectedMapInfo::getCdrSerializedSize(
        const map_msgs::msg::ProjectedMapInfo& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void map_msgs::msg::ProjectedMapInfo::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame_id;
    scdr << m_x;
    scdr << m_y;
    scdr << m_width;
    scdr << m_height;
    scdr << m_min_z;
    scdr << m_max_z;

}

void map_msgs::msg::ProjectedMapInfo::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame_id;
    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_min_z;
    dcdr >> m_max_z;
}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void map_msgs::msg::ProjectedMapInfo::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void map_msgs::msg::ProjectedMapInfo::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& map_msgs::msg::ProjectedMapInfo::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& map_msgs::msg::ProjectedMapInfo::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void map_msgs::msg::ProjectedMapInfo::x(
        double _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
double map_msgs::msg::ProjectedMapInfo::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
double& map_msgs::msg::ProjectedMapInfo::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void map_msgs::msg::ProjectedMapInfo::y(
        double _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
double map_msgs::msg::ProjectedMapInfo::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
double& map_msgs::msg::ProjectedMapInfo::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void map_msgs::msg::ProjectedMapInfo::width(
        double _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
double map_msgs::msg::ProjectedMapInfo::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
double& map_msgs::msg::ProjectedMapInfo::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void map_msgs::msg::ProjectedMapInfo::height(
        double _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
double map_msgs::msg::ProjectedMapInfo::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
double& map_msgs::msg::ProjectedMapInfo::height()
{
    return m_height;
}

/*!
 * @brief This function sets a value in member min_z
 * @param _min_z New value for member min_z
 */
void map_msgs::msg::ProjectedMapInfo::min_z(
        double _min_z)
{
    m_min_z = _min_z;
}

/*!
 * @brief This function returns the value of member min_z
 * @return Value of member min_z
 */
double map_msgs::msg::ProjectedMapInfo::min_z() const
{
    return m_min_z;
}

/*!
 * @brief This function returns a reference to member min_z
 * @return Reference to member min_z
 */
double& map_msgs::msg::ProjectedMapInfo::min_z()
{
    return m_min_z;
}

/*!
 * @brief This function sets a value in member max_z
 * @param _max_z New value for member max_z
 */
void map_msgs::msg::ProjectedMapInfo::max_z(
        double _max_z)
{
    m_max_z = _max_z;
}

/*!
 * @brief This function returns the value of member max_z
 * @return Value of member max_z
 */
double map_msgs::msg::ProjectedMapInfo::max_z() const
{
    return m_max_z;
}

/*!
 * @brief This function returns a reference to member max_z
 * @return Reference to member max_z
 */
double& map_msgs::msg::ProjectedMapInfo::max_z()
{
    return m_max_z;
}


size_t map_msgs::msg::ProjectedMapInfo::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool map_msgs::msg::ProjectedMapInfo::isKeyDefined()
{
    return false;
}

void map_msgs::msg::ProjectedMapInfo::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
           
}


